---
title: "raport2"
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r}
library(DescTools)

n <- 35  # liczba prób (można zmieniać)
alpha <- 0.05  # poziom istotności
p_values <- seq(0, 1, length.out = 100)  # przedział wartości p
B <- 1000  # liczba symulacji
method_list <- c("wilson", "clopper-pearson", "jeffreys")  # Lista metod

# Funkcja obliczająca moc testu dla danego p i metody
power_test <- function(p, method) {
  rejections <- 0
  for (i in 1:B) {
    S <- rbinom(1, n, p)  # Losujemy S ~ B(n, p)
    ci <- BinomCI(S, n, conf.level = 1 - 2*alpha, method = method)
    if (ci[1]>0.5) {  # Sprawdzamy dolną granicę przedziału
      rejections <- rejections + 1
    }
  }
  return(rejections / B)
}

# Obliczanie funkcji mocy dla różnych metod
df <- data.frame()
for (method in method_list) {
  power_values <- sapply(p_values, power_test, method = method)
  df <- rbind(df, data.frame(p = p_values, power = power_values, method = method))
}


# Wykres funkcji mocy
library(ggplot2)
ggplot(df, aes(x = p, y = power, color = method)) +
  geom_line(linewidth = 1) +
  labs(x = "p", y = "Moc testu", title = "Funkcja mocy dla różnych metod") +
  theme_minimal()



```

```         
```

```{r}
wilson_lower_bound <- function(x, n, alpha = 0.05) {
  p_hat <- x / n
  z <- qnorm(1 - alpha)
  denominator <- 1 + (z^2 / n)
  center <- p_hat + (z^2 / (2 * n))
  margin <- z * sqrt((p_hat * (1 - p_hat) / n) + (z^2 / (4 * n^2)))
  return ((center - margin) / denominator)
}

clopper_pearson_lower <- function(x, n, alpha = 0.05) {
  return (qbeta(alpha, x, n - x + 1))
}

jeffreys_lower <- function(x, n, alpha = 0.05) {
  return (qbeta(alpha, x + 0.5, n - x + 0.5))
}

binomial_test <- function(n = 7, p_true = 0.5, alpha = 0.05, method = "wilson") {
  successes <- rbinom(1, n, p_true)
  
  p_low <- switch(method,
                  "wilson" = wilson_lower_bound(successes, n, alpha),
                  "clopper-pearson" = clopper_pearson_lower(successes, n, alpha),
                  "jeffreys" = jeffreys_lower(successes, n, alpha),
                  stop("Nieznana metoda"))
  
  return (p_low > 0.5)
}

power_function <- function(n = 7, alpha = 0.05, p_values = seq(0.4, 0.9, length.out = 100), trials = 1000, method = "wilson") {
  power <- sapply(p_values, function(p) {
    rejections <- sum(replicate(trials, binomial_test(n, p, alpha, method)))
    return (rejections / trials)
  })
  return (power)
}
```

```{r}
n <- 7
alpha <- 0.05
p_values <- seq(0, 0.9, length.out = 100)

# Obliczenie funkcji mocy dla różnych metod
test_methods <- c("wilson", "clopper-pearson", "jeffreys")
colors <- c("blue", "green", "red")

plot(p_values, power_function(n, alpha, p_values, method = test_methods[1]), type = "l", col = colors[1], lwd = 2,
     xlab = "Prawdziwa wartość p", ylab = "Moc testu", main = "Funkcja mocy różnych metod", ylim = c(0, 1))
lines(p_values, power_function(n, alpha, p_values, method = test_methods[2]), col = colors[2], lwd = 2)
lines(p_values, power_function(n, alpha, p_values, method = test_methods[3]), col = colors[3], lwd = 2)

legend("topleft", legend = test_methods, col = colors, lwd = 2)
abline(v = 0.5, lty = 2, col = "red")
abline(h = 0.05, lty = 2, col = "black")
```

```{r}
n <- 35
alpha <- 0.05
p_values <- seq(0, 0.9, length.out = 100)

# Obliczenie funkcji mocy dla różnych metod
test_methods <- c("wilson", "clopper-pearson", "jeffreys")
colors <- c("blue", "green", "red")

plot(p_values, power_function(n, alpha, p_values, method = test_methods[1]), type = "l", col = colors[1], lwd = 2,
     xlab = "Prawdziwa wartość p", ylab = "Moc testu", main = "Funkcja mocy różnych metod", ylim = c(0, 1))
lines(p_values, power_function(n, alpha, p_values, method = test_methods[2]), col = colors[2], lwd = 2)
lines(p_values, power_function(n, alpha, p_values, method = test_methods[3]), col = colors[3], lwd = 2)

legend("topleft", legend = test_methods, col = colors, lwd = 2)
abline(v = 0.5, lty = 2, col = "red")
abline(h = 0.05, lty = 2, col = "black")

```

```{r}
n <- 250
alpha <- 0.05
p_values <- seq(0, 0.9, length.out = 100)

# Obliczenie funkcji mocy dla różnych metod
test_methods <- c("wilson", "clopper-pearson", "jeffreys")
colors <- c("blue", "green", "red")

plot(p_values, power_function(n, alpha, p_values, method = test_methods[1]), type = "l", col = colors[1], lwd = 2,
     xlab = "Prawdziwa wartość p", ylab = "Moc testu", main = "Funkcja mocy różnych metod", ylim = c(0, 1))
lines(p_values, power_function(n, alpha, p_values, method = test_methods[2]), col = colors[2], lwd = 2)
lines(p_values, power_function(n, alpha, p_values, method = test_methods[3]), col = colors[3], lwd = 2)

legend("topleft", legend = test_methods, col = colors, lwd = 2)
abline(v = 0.5, lty = 2, col = "red")
abline(h = 0.05, lty = 2, col = "black")
```

```         
```
